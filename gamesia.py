# -*- coding: utf-8 -*-
"""gamesIA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1upAg50kEqT0cRck4P6kkkZIQWgaBuJZb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime

df = pd.read_csv('/content/all_games.csv', encoding='utf-8')
df.head()

df.isnull().sum()

df.shape

df['summary'].fillna('Missing', inplace=True)

df.isnull().sum()

df.head()

df['platform'].value_counts()

"""## Data Cleaning"""

df[df['user_review']=='tbd']

df = df.drop(df[df['user_review'] == 'tbd'].index)

count_platform = df["platform"].value_counts().reset_index()
count_platform.columns = ["Platform", "Count"]
count_platform

"""## Count by platform"""

sns.catplot(x="Count", y="Platform", kind="bar", data=count_platform, height=6, aspect=3)
plt.title('Number of Games by Platform', fontsize=16)
plt.grid(True)

"""## Top 10 Games by User Review"""

import numpy as np

df['user_review'] = df['user_review'].astype(np.float)

top_user_score = df.sort_values(['user_review'], ascending=False)[:10]
top_user_score[['name', 'user_review']]

fig, ax = plt.subplots(figsize = (10, 5))
sns.barplot(x = top_user_score['user_review'], y = top_user_score['name'])
plt.xlim(9.3, 9.8)
plt.title('Top 10 Games by User Review ', fontsize = 16)
plt.xlabel('User Review Score', fontsize = 14)
plt.ylabel('Name', fontsize = 14)

"""## Top 10 Games by Meta Score"""

top_meta_score = df.sort_values(['meta_score'], ascending = False)[:10]
top_meta_score[['name', 'meta_score']]

fig, ax = plt.subplots(figsize=(10, 5))
sns.barplot(x=top_meta_score['meta_score'], y=top_meta_score['name'], 
            orient = 'h', 
            palette='flare')
plt.xlim(95, 100)
plt.title('Top 10 Games by Meta Score', fontsize=16)
plt.xlabel('Meta Score', fontsize=14)
plt.ylabel('Name', fontsize=14)

"""## Era that had the best video games"""

era = df
era['release_date'] = pd.to_datetime(era['release_date'])

era['year'] = df['release_date'].dt.year

era1 = era.groupby('year')

era2 = df.sort_values(['meta_score'], ascending = False)
era2[['year', 'meta_score']]

era2 = era.groupby('year')

era2.head()

era2['meta_score'].sum().sort_values(ascending = False).reset_index()

era3 = era2['meta_score'].sum().sort_values(ascending = False).reset_index()
era3.columns = ["year", "Total"]

sns.catplot(x="year", y="Total", kind="bar", data=era3, height=6, aspect=3)
plt.title("Year that had the best video games ( Popularity ) ")
plt.xlabel('Year')
plt.ylabel("Popularity of Video Games")
plt.grid(True)

"""## IA

"""

!pip install kneed

import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from kneed import KneeLocator # detector de joelho/cotovelo da curva
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import plotly as py
import plotly.graph_objs as go

data = pd.read_csv('/content/all_games.csv', encoding='utf-8')
data.head()

games_name = data['name']
data.drop('name', axis=1, inplace=True)
games_plaform = data['platform']
data.drop('platform', axis=1, inplace=True)
games_release_date = data['release_date']
data.drop('release_date', axis=1, inplace=True)
games_summary = data['summary']
data.drop('summary', axis=1, inplace=True)

import numpy as np
data[data['user_review']=='tbd']
data = data.drop(data[data['user_review'] == 'tbd'].index)
data['user_review'] = data['user_review'].astype(np.float)

data_numpy = data.to_numpy()

mms = MinMaxScaler()
mms.fit(data_numpy)
dados_transformados = mms.transform(data)

soma_distancias_quadraticas = []
K = range(1, 15)
print('\nK\tSoma das distâncias quadráticas')
for k in K:
  km = KMeans(n_clusters=k)
  km = km.fit(dados_transformados)
  soma_distancias_quadraticas.append(km.inertia_)
  print(k, '\t', soma_distancias_quadraticas[k-1])

plt.plot(K, soma_distancias_quadraticas, 'bx-')
plt.xlabel('k')
plt.ylabel('Soma distâncias quadráticas')
plt.title('Método do joelho/cotovelo para achar o valor ótimo de k')
plt.show()
kl = KneeLocator(K, soma_distancias_quadraticas, curve="convex", direction="decreasing")
print('O método analítico informa que o joelho/cotovelo está em k =', kl.elbow)